{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Toggle = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _toggle = require(\"./toggle.style\");\n\nvar _theme = require(\"../../theme\");\n\nvar _useDefaultProps = require(\"../../utilities/useDefaultProps\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/toggle/toggle.component.tsx\";\n\nvar Toggle = function Toggle(incomingProps) {\n  var props = (0, _useDefaultProps.useDefaultProps)('Toggle', incomingProps, {\n    w: 55,\n    h: 30,\n    onPress: function onPress() {},\n    activeBg: 'green600',\n    bg: 'gray400',\n    on: false,\n    circleBg: 'white',\n    activeCircleBg: 'white',\n    duration: 300,\n    rounded: 'circle',\n    disabled: false\n  });\n  var h = props.h,\n      w = props.w,\n      bg = props.bg,\n      m = props.m,\n      mt = props.mt,\n      mr = props.mr,\n      mb = props.mb,\n      ml = props.ml,\n      ms = props.ms,\n      p = props.p,\n      pr = props.pr,\n      pt = props.pt,\n      pb = props.pb,\n      pl = props.pl,\n      disabled = props.disabled,\n      rounded = props.rounded,\n      roundedTop = props.roundedTop,\n      roundedRight = props.roundedRight,\n      roundedBottom = props.roundedBottom,\n      roundedLeft = props.roundedLeft,\n      borderColor = props.borderColor,\n      borderBottomColor = props.borderBottomColor,\n      borderLeftColor = props.borderLeftColor,\n      borderTopColor = props.borderTopColor,\n      borderRightColor = props.borderRightColor,\n      borderWidth = props.borderWidth,\n      borderLeftWidth = props.borderLeftWidth,\n      borderRightWidth = props.borderRightWidth,\n      borderBottomWidth = props.borderBottomWidth,\n      borderTopWidth = props.borderTopWidth,\n      borderEndWidth = props.borderEndWidth,\n      onPress = props.onPress,\n      activeBg = props.activeBg,\n      circleBg = props.circleBg,\n      activeCircleBg = props.activeCircleBg,\n      duration = props.duration,\n      on = props.on,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"h\", \"w\", \"bg\", \"m\", \"mt\", \"mr\", \"mb\", \"ml\", \"ms\", \"p\", \"pr\", \"pt\", \"pb\", \"pl\", \"disabled\", \"rounded\", \"roundedTop\", \"roundedRight\", \"roundedBottom\", \"roundedLeft\", \"borderColor\", \"borderBottomColor\", \"borderLeftColor\", \"borderTopColor\", \"borderRightColor\", \"borderWidth\", \"borderLeftWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderTopWidth\", \"borderEndWidth\", \"onPress\", \"activeBg\", \"circleBg\", \"activeCircleBg\", \"duration\", \"on\"]);\n\n  var _useState = (0, React.useState)(new _reactNative.Animated.Value(on ? 1 : 0)),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 1),\n      animXValue = _useState2[0];\n\n  var _useContext = (0, React.useContext)(_theme.ThemeContext),\n      theme = _useContext.theme;\n\n  var computedStyle = (0, _toggle.getStyle)(theme, props);\n  var endPos = w - h + 3;\n  var circlePosXEnd = endPos;\n\n  var _useState3 = (0, React.useState)(3),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 1),\n      circlePosXStart = _useState4[0];\n\n  var prevSwitchOnRef = (0, React.useRef)();\n  var prevSwitchOn = !!prevSwitchOnRef.current;\n  (0, React.useEffect)(function () {\n    var runAnimation = function runAnimation() {\n      var animValue = {\n        fromValue: on ? 0 : 1,\n        toValue: on ? 1 : 0,\n        duration: duration,\n        useNativeDriver: false\n      };\n\n      _reactNative.Animated.timing(animXValue, animValue).start();\n    };\n\n    prevSwitchOnRef.current = on;\n\n    if (prevSwitchOn !== on) {\n      runAnimation();\n    }\n  }, [animXValue, prevSwitchOn, on, duration]);\n  return React.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({\n    onPress: !disabled ? onPress : function () {},\n    activeOpacity: 0.5\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }), React.createElement(_reactNative.Animated.View, {\n    style: [computedStyle.container, {\n      backgroundColor: animXValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(0, _theme.getThemeProperty)(theme.colors, bg), (0, _theme.getThemeProperty)(theme.colors, activeBg)]\n      })\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, React.createElement(_reactNative.Animated.View, {\n    style: [computedStyle.circle, {\n      backgroundColor: animXValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(0, _theme.getThemeProperty)(theme.colors, circleBg), (0, _theme.getThemeProperty)(theme.colors, activeCircleBg)]\n      })\n    }, {\n      transform: [{\n        translateX: animXValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [circlePosXStart, circlePosXEnd]\n        })\n      }]\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })));\n};\n\nexports.Toggle = Toggle;","map":{"version":3,"sources":["toggle.component.tsx"],"names":["Toggle","props","w","h","onPress","activeBg","bg","on","circleBg","activeCircleBg","duration","rounded","disabled","m","mt","mr","mb","ml","ms","p","pr","pt","pb","pl","roundedTop","roundedRight","roundedBottom","roundedLeft","borderColor","borderBottomColor","borderLeftColor","borderTopColor","borderRightColor","borderWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderTopWidth","borderEndWidth","rest","animXValue","Animated","theme","ThemeContext","computedStyle","endPos","circlePosXEnd","circlePosXStart","prevSwitchOnRef","prevSwitchOn","runAnimation","animValue","fromValue","toValue","useNativeDriver","backgroundColor","inputRange","outputRange","transform","translateX"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAIA,IAAA,OAAA,GAAA,OAAA,kBAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,eAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,mCAAA;;;;AAEA,IAAMA,MAA6B,GAA7BA,SAAAA,MAAAA,CAAgC,aAAhCA,EAAmD;AACvD,MAAMC,KAAK,GAAG,CAAA,GAAA,gBAAA,CAAA,eAAA,EAAA,QAAA,EAAA,aAAA,EAAyC;AACrDC,IAAAA,CAAC,EADoD,EAAA;AAErDC,IAAAA,CAAC,EAFoD,EAAA;AAGrDC,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAY,CAHgC,CAAA;AAIrDC,IAAAA,QAAQ,EAJ6C,UAAA;AAKrDC,IAAAA,EAAE,EALmD,SAAA;AAMrDC,IAAAA,EAAE,EANmD,KAAA;AAOrDC,IAAAA,QAAQ,EAP6C,OAAA;AAQrDC,IAAAA,cAAc,EARuC,OAAA;AASrDC,IAAAA,QAAQ,EAT6C,GAAA;AAUrDC,IAAAA,OAAO,EAV8C,QAAA;AAWrDC,IAAAA,QAAQ,EAXV;AAAuD,GAAzC,CAAd;AADuD,MAgBrDT,CAhBqD,GAsDnDF,KAtDmD,CAAA,CAAA;AAAA,MAiBrDC,CAjBqD,GAsDnDD,KAtDmD,CAAA,CAAA;AAAA,MAkBrDK,EAlBqD,GAsDnDL,KAtDmD,CAAA,EAAA;AAAA,MAmBrDY,CAnBqD,GAsDnDZ,KAtDmD,CAAA,CAAA;AAAA,MAoBrDa,EApBqD,GAsDnDb,KAtDmD,CAAA,EAAA;AAAA,MAqBrDc,EArBqD,GAsDnDd,KAtDmD,CAAA,EAAA;AAAA,MAsBrDe,EAtBqD,GAsDnDf,KAtDmD,CAAA,EAAA;AAAA,MAuBrDgB,EAvBqD,GAsDnDhB,KAtDmD,CAAA,EAAA;AAAA,MAwBrDiB,EAxBqD,GAsDnDjB,KAtDmD,CAAA,EAAA;AAAA,MAyBrDkB,CAzBqD,GAsDnDlB,KAtDmD,CAAA,CAAA;AAAA,MA0BrDmB,EA1BqD,GAsDnDnB,KAtDmD,CAAA,EAAA;AAAA,MA2BrDoB,EA3BqD,GAsDnDpB,KAtDmD,CAAA,EAAA;AAAA,MA4BrDqB,EA5BqD,GAsDnDrB,KAtDmD,CAAA,EAAA;AAAA,MA6BrDsB,EA7BqD,GAsDnDtB,KAtDmD,CAAA,EAAA;AAAA,MA8BrDW,QA9BqD,GAsDnDX,KAtDmD,CAAA,QAAA;AAAA,MA+BrDU,OA/BqD,GAsDnDV,KAtDmD,CAAA,OAAA;AAAA,MAgCrDuB,UAhCqD,GAsDnDvB,KAtDmD,CAAA,UAAA;AAAA,MAiCrDwB,YAjCqD,GAsDnDxB,KAtDmD,CAAA,YAAA;AAAA,MAkCrDyB,aAlCqD,GAsDnDzB,KAtDmD,CAAA,aAAA;AAAA,MAmCrD0B,WAnCqD,GAsDnD1B,KAtDmD,CAAA,WAAA;AAAA,MAoCrD2B,WApCqD,GAsDnD3B,KAtDmD,CAAA,WAAA;AAAA,MAqCrD4B,iBArCqD,GAsDnD5B,KAtDmD,CAAA,iBAAA;AAAA,MAsCrD6B,eAtCqD,GAsDnD7B,KAtDmD,CAAA,eAAA;AAAA,MAuCrD8B,cAvCqD,GAsDnD9B,KAtDmD,CAAA,cAAA;AAAA,MAwCrD+B,gBAxCqD,GAsDnD/B,KAtDmD,CAAA,gBAAA;AAAA,MAyCrDgC,WAzCqD,GAsDnDhC,KAtDmD,CAAA,WAAA;AAAA,MA0CrDiC,eA1CqD,GAsDnDjC,KAtDmD,CAAA,eAAA;AAAA,MA2CrDkC,gBA3CqD,GAsDnDlC,KAtDmD,CAAA,gBAAA;AAAA,MA4CrDmC,iBA5CqD,GAsDnDnC,KAtDmD,CAAA,iBAAA;AAAA,MA6CrDoC,cA7CqD,GAsDnDpC,KAtDmD,CAAA,cAAA;AAAA,MA8CrDqC,cA9CqD,GAsDnDrC,KAtDmD,CAAA,cAAA;AAAA,MA+CrDG,OA/CqD,GAsDnDH,KAtDmD,CAAA,OAAA;AAAA,MAgDrDI,QAhDqD,GAsDnDJ,KAtDmD,CAAA,QAAA;AAAA,MAiDrDO,QAjDqD,GAsDnDP,KAtDmD,CAAA,QAAA;AAAA,MAkDrDQ,cAlDqD,GAsDnDR,KAtDmD,CAAA,cAAA;AAAA,MAmDrDS,QAnDqD,GAsDnDT,KAtDmD,CAAA,QAAA;AAAA,MAoDrDM,EApDqD,GAsDnDN,KAtDmD,CAAA,EAAA;AAAA,MAqDlDsC,IArDkD,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAA,SAAA,EAAA,YAAA,EAAA,cAAA,EAAA,eAAA,EAAA,aAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,GAuDlC,CAAA,GAAA,KAAA,CAAA,QAAA,EAAS,IAAIE,YAAAA,CAAAA,QAAAA,CAAJ,KAAA,CAAmBlC,EAAE,GAAA,CAAA,GAvDI,CAuDzB,CAAT,CAvDkC;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAuDhDiC,UAvDgD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GAwDrC,CAAA,GAAA,KAAA,CAAA,UAAA,EAAWG,MAAAA,CAxD0B,YAwDrC,CAxDqC;AAAA,MAwD/CD,KAxD+C,GAAA,WAAA,CAAA,KAAA;;AAyDvD,MAAME,aAAa,GAAG,CAAA,GAAA,OAAA,CAAA,QAAA,EAAA,KAAA,EAAtB,KAAsB,CAAtB;AAEA,MAAMC,MAAM,GAAI3C,CAAD,GAAA,CAACA,GAAhB,CAAA;AACA,MAAM4C,aAAa,GAAnB,MAAA;;AA5DuD,MAAA,UAAA,GA6D7B,CAAA,GAAA,KAAA,CAAA,QAAA,EA7D6B,CA6D7B,CA7D6B;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MA6DhDC,eA7DgD,GAAA,UAAA,CAAA,CAAA,CAAA;;AA+DvD,MAAMC,eAAe,GAAG,CAAA,GAAA,KAAA,CAAxB,MAAwB,GAAxB;AACA,MAAMC,YAAY,GAAG,CAAC,CAACD,eAAe,CAAtC,OAAA;AAKA,GAAA,GAAA,KAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAME,YAAY,GAAZA,SAAAA,YAAAA,GAA2B;AAC/B,UAAMC,SAAS,GAAG;AAChBC,QAAAA,SAAS,EAAE7C,EAAE,GAAA,CAAA,GADG,CAAA;AAEhB8C,QAAAA,OAAO,EAAE9C,EAAE,GAAA,CAAA,GAFK,CAAA;AAGhBG,QAAAA,QAAQ,EAHQ,QAAA;AAIhB4C,QAAAA,eAAe,EAJjB;AAAkB,OAAlB;;AAMAb,MAAAA,YAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAAAA,KAAAA;AAPF,KAAA;;AAUAO,IAAAA,eAAe,CAAfA,OAAAA,GAAAA,EAAAA;;AACA,QAAIC,YAAY,KAAhB,EAAA,EAAyB;AACvBC,MAAAA,YAAY;AAEf;AAfD,GAAA,EAeG,CAAA,UAAA,EAAA,YAAA,EAAA,EAAA,EAfH,QAeG,CAfH;AAiBA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,gBAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,OAAO,EAAE,CAAA,QAAA,GAAA,OAAA,GAAsB,YAAM,CADvC,CAAA;AAEE,IAAA,aAAa,EAFf;AAAA,GAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAC,CAAD,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLN,aAAa,CADR,SAAA,EAEL;AACEW,MAAAA,eAAe,EAAEf,UAAU,CAAVA,WAAAA,CAAuB;AACtCgB,QAAAA,UAAU,EAAE,CAAA,CAAA,EAD0B,CAC1B,CAD0B;AAEtCC,QAAAA,WAAW,EAAE,CACX,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBf,KAAK,CAAtB,MAAA,EADW,EACX,CADW,EAEX,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBA,KAAK,CAAtB,MAAA,EARV,QAQU,CAFW;AAFyB,OAAvBF;AADnB,KAFK,CADT;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,GAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,EAcE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAC,CAAD,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLI,aAAa,CADR,MAAA,EAEL;AACEW,MAAAA,eAAe,EAAEf,UAAU,CAAVA,WAAAA,CAAuB;AACtCgB,QAAAA,UAAU,EAAE,CAAA,CAAA,EAD0B,CAC1B,CAD0B;AAEtCC,QAAAA,WAAW,EAAE,CACX,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBf,KAAK,CAAtB,MAAA,EADW,QACX,CADW,EAEX,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBA,KAAK,CAAtB,MAAA,EAPD,cAOC,CAFW;AAFyB,OAAvBF;AADnB,KAFK,EAWL;AACEkB,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,UAAU,EAAEnB,UAAU,CAAVA,WAAAA,CAAuB;AACjCgB,UAAAA,UAAU,EAAE,CAAA,CAAA,EADqB,CACrB,CADqB;AAEjCC,UAAAA,WAAW,EAAE,CAAA,eAAA,EAjBzB,aAiByB;AAFoB,SAAvBjB;AADd,OADS;AADb,KAXK,CADT;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,GAAA;AAAA,MAAA,YAAA,EApBN;AAoBM;AAAA,GAAA,CAdF,CALF,CADF;AAtFF,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, TouchableOpacity } from 'react-native';\nimport { useEffect, useRef, useState, useContext } from 'react';\n\nimport { getStyle } from './toggle.style';\nimport { ToggleProps } from './toggle.type';\nimport { ThemeContext, getThemeProperty } from '../../theme';\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\n\nconst Toggle: React.FC<ToggleProps> = (incomingProps) => {\n  const props = useDefaultProps('Toggle', incomingProps, {\n    w: 55,\n    h: 30,\n    onPress: (): void => {},\n    activeBg: 'green600',\n    bg: 'gray400',\n    on: false,\n    circleBg: 'white',\n    activeCircleBg: 'white',\n    duration: 300,\n    rounded: 'circle',\n    disabled: false,\n  });\n\n  const {\n    h,\n    w,\n    bg,\n    m,\n    mt,\n    mr,\n    mb,\n    ml,\n    ms,\n    p,\n    pr,\n    pt,\n    pb,\n    pl,\n    disabled,\n    rounded,\n    roundedTop,\n    roundedRight,\n    roundedBottom,\n    roundedLeft,\n    borderColor,\n    borderBottomColor,\n    borderLeftColor,\n    borderTopColor,\n    borderRightColor,\n    borderWidth,\n    borderLeftWidth,\n    borderRightWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderEndWidth,\n    onPress,\n    activeBg,\n    circleBg,\n    activeCircleBg,\n    duration,\n    on,\n    ...rest\n  } = props;\n  const [animXValue] = useState(new Animated.Value(on ? 1 : 0));\n  const { theme } = useContext(ThemeContext);\n  const computedStyle = getStyle(theme, props);\n\n  const endPos = (w as number) - (h as number) + 3;\n  const circlePosXEnd = endPos;\n  const [circlePosXStart] = useState(3);\n\n  const prevSwitchOnRef = useRef<boolean>();\n  const prevSwitchOn = !!prevSwitchOnRef.current;\n\n  /**\n   *\n   */\n  useEffect(() => {\n    const runAnimation = (): void => {\n      const animValue = {\n        fromValue: on ? 0 : 1,\n        toValue: on ? 1 : 0,\n        duration,\n        useNativeDriver: false,\n      };\n      Animated.timing(animXValue, animValue).start();\n    };\n\n    prevSwitchOnRef.current = on;\n    if (prevSwitchOn !== on) {\n      runAnimation();\n    }\n  }, [animXValue, prevSwitchOn, on, duration]);\n\n  return (\n    <TouchableOpacity\n      onPress={!disabled ? onPress : () => {}}\n      activeOpacity={0.5}\n      {...rest}\n    >\n      <Animated.View\n        style={[\n          computedStyle.container,\n          {\n            backgroundColor: animXValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [\n                getThemeProperty(theme.colors, bg),\n                getThemeProperty(theme.colors, activeBg),\n              ],\n            }),\n          },\n        ]}\n      >\n        <Animated.View\n          style={[\n            computedStyle.circle,\n            {\n              backgroundColor: animXValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  getThemeProperty(theme.colors, circleBg),\n                  getThemeProperty(theme.colors, activeCircleBg),\n                ],\n              }),\n            },\n            {\n              transform: [\n                {\n                  translateX: animXValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [\n                      circlePosXStart as string | number,\n                      circlePosXEnd as string | number,\n                    ] as string[] | number[],\n                  }),\n                },\n              ],\n            },\n          ]}\n        />\n      </Animated.View>\n    </TouchableOpacity>\n  );\n};\n\n// Toggle.defaultProps = {\n//   w: 55,\n//   h: 30,\n//   onPress: (): void => {},\n//   activeBg: 'green600',\n//   bg: 'gray400',\n//   on: false,\n//   circleBg: 'white',\n//   activeCircleBg: 'white',\n//   duration: 300,\n//   rounded: 'circle',\n//   disabled: false,\n// };\n\nexport { Toggle };\n"]},"metadata":{},"sourceType":"script"}
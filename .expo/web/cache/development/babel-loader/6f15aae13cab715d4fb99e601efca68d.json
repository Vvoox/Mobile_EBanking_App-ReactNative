{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Textarea = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _input = require(\"./input.style\");\n\nvar _theme = require(\"../../theme\");\n\nvar _useDefaultProps = require(\"../../utilities/useDefaultProps\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/input/textarea.component.tsx\";\n\nvar Textarea = function Textarea(incomingProps) {\n  var props = (0, _useDefaultProps.useDefaultProps)('Textarea', incomingProps, {\n    minH: 100,\n    p: 'lg',\n    borderColor: 'gray500',\n    borderWidth: 1,\n    multiline: true,\n    textAlignVertical: 'top'\n  });\n  var h = props.h,\n      w = props.w,\n      m = props.m,\n      minH = props.minH,\n      minW = props.minW,\n      suffix = props.suffix,\n      prefix = props.prefix,\n      style = props.style,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      children = props.children,\n      focusBorderColor = props.focusBorderColor,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"h\", \"w\", \"m\", \"minH\", \"minW\", \"suffix\", \"prefix\", \"style\", \"onBlur\", \"onFocus\", \"children\", \"focusBorderColor\"]);\n\n  var _useContext = (0, React.useContext)(_theme.ThemeContext),\n      theme = _useContext.theme;\n\n  var _useState = (0, React.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isFocussed = _useState2[0],\n      setIsFocussed = _useState2[1];\n\n  var computedStyle = (0, _input.getStyle)(theme, props, {\n    isFocussed: isFocussed\n  });\n\n  var onFocusInput = function onFocusInput(e) {\n    setIsFocussed(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var onBlurInput = function onBlurInput(e) {\n    setIsFocussed(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  return React.createElement(_reactNative.View, {\n    style: computedStyle.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.TextInput, (0, _extends2.default)({\n    onFocus: function onFocus(e) {\n      return onFocusInput(e);\n    },\n    onBlur: function onBlur(e) {\n      return onBlurInput(e);\n    },\n    style: computedStyle.input\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  })));\n};\n\nexports.Textarea = Textarea;","map":{"version":3,"sources":["textarea.component.tsx"],"names":["Textarea","props","minH","p","borderColor","borderWidth","multiline","textAlignVertical","h","w","m","minW","suffix","prefix","style","onBlur","onFocus","children","focusBorderColor","rest","theme","ThemeContext","isFocussed","setIsFocussed","computedStyle","onFocusInput","onBlurInput"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useContext, useState } from 'react';\nimport {\n  View as RNView,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInput as RNTextInput,\n} from 'react-native';\n\nimport { getStyle } from './input.style';\nimport { TextareaProps } from './textarea.type';\nimport { ThemeContext } from '../../theme';\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\n\nconst Textarea: React.FunctionComponent<TextareaProps> = (incomingProps) => {\n  const props = useDefaultProps('Textarea', incomingProps, {\n    minH: 100,\n    p: 'lg',\n    borderColor: 'gray500',\n    borderWidth: 1,\n    multiline: true,\n    textAlignVertical: 'top',\n  });\n\n  const {\n    h,\n    w,\n    m,\n    minH,\n    minW,\n    suffix,\n    prefix,\n    style,\n    onBlur,\n    onFocus,\n    children,\n    focusBorderColor,\n    ...rest\n  } = props;\n  const { theme } = useContext(ThemeContext);\n  const [isFocussed, setIsFocussed] = useState(false);\n  const computedStyle = getStyle(theme, props, { isFocussed });\n\n  /**\n   * on focus input\n   */\n  const onFocusInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setIsFocussed(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  /**\n   * on blur input\n   * @param e\n   */\n  const onBlurInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setIsFocussed(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  return (\n    <RNView style={computedStyle.container}>\n      <RNTextInput\n        onFocus={(e) => onFocusInput(e)}\n        onBlur={(e) => onBlurInput(e)}\n        style={computedStyle.input}\n        {...rest}\n      />\n    </RNView>\n  );\n};\n\n// Textarea.defaultProps = {\n//   minH: 100,\n//   p: 'lg',\n//   borderColor: 'gray500',\n//   borderWidth: 1,\n// };\n\nexport { Textarea };\n"]},"metadata":{},"sourceType":"script"}
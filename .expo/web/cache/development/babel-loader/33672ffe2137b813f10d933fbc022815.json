{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getStyle = function getStyle(theme, props) {\n  var computedStyle = {};\n  computedStyle.container = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    height: props.h,\n    width: props.w,\n    minHeight: props.minH,\n    minWidth: props.minW,\n    maxWidth: props.maxW,\n    maxHeight: props.maxH,\n    top: props.top,\n    left: props.left,\n    right: props.right,\n    bottom: props.bottom,\n    position: props.position,\n    alignSelf: props.alignSelf,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: props.opacity,\n    color: (0, _theme.getThemeProperty)(theme.colors, props.color),\n    fontSize: (0, _theme.getThemeProperty)(theme.fontSize, props.fontSize),\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg)\n  }, (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createSpacingStyles)(props, theme.spacing)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)), (0, _theme.createShadowStyles)(props, theme));\n\n  if (props.style) {\n    computedStyle.container = _objectSpread(_objectSpread({}, computedStyle.container), props.style);\n  }\n\n  return _reactNative.StyleSheet.create(computedStyle);\n};\n\nexports.getStyle = getStyle;","map":{"version":3,"sources":["icon.style.tsx"],"names":["getStyle","computedStyle","height","props","width","minHeight","minWidth","maxWidth","maxHeight","top","left","right","bottom","position","alignSelf","alignItems","justifyContent","opacity","color","theme","fontSize","backgroundColor","StyleSheet"],"mappings":";;;;;;;sDAAA,uC;;;;AAGA,IAAA,MAAA,GAAA,OAAA,6BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO;;AAAA,IAAMA,QAAQ,GAARA,SAAAA,QAAAA,CAAW,KAAXA,EAAW,KAAXA,EAAmD;AAC9D,MAAMC,aAAkB,GAAxB,EAAA;AAEAA,EAAAA,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA;AACEC,IAAAA,MAAM,EAAEC,KAAK,CADfF,CAAAA;AAEEG,IAAAA,KAAK,EAAED,KAAK,CAFdF,CAAAA;AAGEI,IAAAA,SAAS,EAAEF,KAAK,CAHlBF,IAAAA;AAIEK,IAAAA,QAAQ,EAAEH,KAAK,CAJjBF,IAAAA;AAKEM,IAAAA,QAAQ,EAAEJ,KAAK,CALjBF,IAAAA;AAMEO,IAAAA,SAAS,EAAEL,KAAK,CANlBF,IAAAA;AAOEQ,IAAAA,GAAG,EAAEN,KAAK,CAPZF,GAAAA;AAQES,IAAAA,IAAI,EAAEP,KAAK,CARbF,IAAAA;AASEU,IAAAA,KAAK,EAAER,KAAK,CATdF,KAAAA;AAUEW,IAAAA,MAAM,EAAET,KAAK,CAVfF,MAAAA;AAWEY,IAAAA,QAAQ,EAAEV,KAAK,CAXjBF,QAAAA;AAYEa,IAAAA,SAAS,EAAEX,KAAK,CAZlBF,SAAAA;AAaEc,IAAAA,UAAU,EAbZd,QAAAA;AAcEe,IAAAA,cAAc,EAdhBf,QAAAA;AAeEgB,IAAAA,OAAO,EAAEd,KAAK,CAfhBF,OAAAA;AAgBEiB,IAAAA,KAAK,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBC,KAAK,CAAtB,MAAA,EAA+BhB,KAAK,CAhB7CF,KAgBS,CAhBTA;AAiBEmB,IAAAA,QAAQ,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBD,KAAK,CAAtB,QAAA,EAAiChB,KAAK,CAjBlDF,QAiBY,CAjBZA;AAkBEoB,IAAAA,eAAe,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBF,KAAK,CAAtB,MAAA,EAA+BhB,KAAK,CAlBvDF,EAkBmB;AAlBnBA,GAAAA,EAmBK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAnBLA,KAmBK,CAnBLA,CAAAA,EAoBK,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,KAAA,EAA2BkB,KAAK,CApBrClB,OAoBK,CApBLA,CAAAA,EAqBK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAAA,KAAA,EAA+BkB,KAAK,CArBzClB,MAqBK,CArBLA,CAAAA,EAsBK,CAAA,GAAA,MAAA,CAAA,wBAAA,EAAA,KAAA,EAAgCkB,KAAK,CAtB1ClB,YAsBK,CAtBLA,CAAAA,EAuBK,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAA,KAAA,EAvBLA,KAuBK,CAvBLA,CAAAA;;AA2BA,MAAIE,KAAK,CAAT,KAAA,EAAiB;AACfF,IAAAA,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,SAAAA,CAAAA,EAGKE,KAAK,CAHVF,KAAAA,CAAAA;AAOF;;AAAA,SAAOqB,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAP,aAAOA,CAAP;AAtCK,CAAA","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { ThemeType } from '../../theme';\n\nimport {\n  getThemeProperty,\n  createShadowStyles,\n  createSpacingStyles,\n  createBorderColorStyles,\n  createBorderWidthStyles,\n  createBorderRadiusStyles,\n} from '../../theme/theme.service';\nimport { IconProps } from './icon.type';\n\n/**\n * computed style\n *\n * @param theme\n * @param props\n */\nexport const getStyle = (theme: ThemeType, props: IconProps) => {\n  const computedStyle: any = {};\n\n  computedStyle.container = {\n    height: props.h,\n    width: props.w,\n    minHeight: props.minH,\n    minWidth: props.minW,\n    maxWidth: props.maxW,\n    maxHeight: props.maxH,\n    top: props.top,\n    left: props.left,\n    right: props.right,\n    bottom: props.bottom,\n    position: props.position,\n    alignSelf: props.alignSelf,\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: props.opacity,\n    color: getThemeProperty(theme.colors, props.color),\n    fontSize: getThemeProperty(theme.fontSize, props.fontSize),\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    ...createBorderWidthStyles(props),\n    ...createSpacingStyles(props, theme.spacing),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n    ...createShadowStyles(props, theme),\n  };\n\n  // merging style props to computed style\n  if (props.style) {\n    computedStyle.container = {\n      ...computedStyle.container,\n      // @ts-ignore\n      ...props.style,\n    };\n  }\n\n  return StyleSheet.create(computedStyle);\n};\n"]},"metadata":{},"sourceType":"script"}
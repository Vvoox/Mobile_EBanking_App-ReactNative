{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoRandom';\n  },\n\n  getRandomBytes: function getRandomBytes(length) {\n    var _window$crypto;\n\n    var array = new Uint8Array(length);\n    return ((_window$crypto = window.crypto) != null ? _window$crypto : window.msCrypto).getRandomValues(array);\n  },\n  getRandomBytesAsync: function getRandomBytesAsync(length) {\n    var _window$crypto2;\n\n    var array;\n    return _regeneratorRuntime.async(function getRandomBytesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            array = new Uint8Array(length);\n            return _context.abrupt(\"return\", ((_window$crypto2 = window.crypto) != null ? _window$crypto2 : window.msCrypto).getRandomValues(array));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoRandom.web.ts"],"names":[],"mappings":";AAAA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,YAAP;AACD,GAHY;;AAIb,EAAA,cAJa,0BAIE,MAJF,EAIgB;AAAA;;AAC3B,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAd;AAEA,WAAO,mBAAC,MAAM,CAAC,MAAR,6BAAkB,MAAM,CAAC,QAAzB,EAAmC,eAAnC,CAAmD,KAAnD,CAAP;AACD,GARY;AASP,EAAA,mBATO,+BASa,MATb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUL,YAAA,KAVK,GAUG,IAAI,UAAJ,CAAe,MAAf,CAVH;AAAA,6CAYJ,oBAAC,MAAM,CAAC,MAAR,8BAAkB,MAAM,CAAC,QAAzB,EAAmC,eAAnC,CAAmD,KAAnD,CAZI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
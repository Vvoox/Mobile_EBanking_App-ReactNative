{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getStyle = function getStyle(theme, props) {\n  var computedStyle = {};\n  computedStyle.container = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg),\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: props.size,\n    height: props.size,\n    alignSelf: props.alignSelf,\n    zIndex: props.zIndex,\n    opacity: props.opacity\n  }, (0, _theme.createPositionStyle)(props)), (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createShadowStyles)(props, theme)), (0, _theme.createSpacingStyles)(props, theme.spacing)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n  computedStyle.row = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg),\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    alignSelf: props.alignSelf,\n    zIndex: props.zIndex,\n    opacity: props.opacity\n  }, (0, _theme.createPositionStyle)(props)), (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createShadowStyles)(props, theme)), (0, _theme.createSpacingStyles)(props, theme.spacing)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n  computedStyle.text = {\n    color: (0, _theme.getThemeProperty)(theme.colors, props.color),\n    fontSize: (0, _theme.getThemeProperty)(theme.fontSize, props.fontSize),\n    textAlignVertical: 'center',\n    textAlign: 'center'\n  };\n  computedStyle.image = _objectSpread({\n    height: props.size,\n    width: props.size\n  }, (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n\n  if (props.style) {\n    computedStyle.container = _objectSpread(_objectSpread({}, computedStyle.container), props.style);\n  }\n\n  return _reactNative.StyleSheet.create(computedStyle);\n};\n\nexports.getStyle = getStyle;","map":{"version":3,"sources":["avatar.style.tsx"],"names":["getStyle","computedStyle","backgroundColor","theme","props","alignItems","justifyContent","width","height","alignSelf","zIndex","opacity","flexDirection","color","fontSize","textAlignVertical","textAlign","StyleSheet"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { ThemeType } from '../../theme';\n\nimport {\n  getThemeProperty,\n  createShadowStyles,\n  createSpacingStyles,\n  createBorderWidthStyles,\n  createBorderColorStyles,\n  createBorderRadiusStyles,\n  createPositionStyle,\n} from '../../theme/theme.service';\nimport { AvatarProps } from './avatar.type';\n\n/**\n * computed style\n *\n * @param theme\n * @param props\n */\nexport const getStyle = (theme: ThemeType, props: AvatarProps) => {\n  const computedStyle: any = {};\n\n  computedStyle.container = {\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: props.size,\n    height: props.size,\n    alignSelf: props.alignSelf,\n    zIndex: props.zIndex,\n    opacity: props.opacity,\n    ...createPositionStyle(props),\n    ...createBorderWidthStyles(props),\n    ...createShadowStyles(props, theme),\n    ...createSpacingStyles(props, theme.spacing),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  computedStyle.row = {\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    alignSelf: props.alignSelf,\n    zIndex: props.zIndex,\n    opacity: props.opacity,\n    ...createPositionStyle(props),\n    ...createBorderWidthStyles(props),\n    ...createShadowStyles(props, theme),\n    ...createSpacingStyles(props, theme.spacing),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  computedStyle.text = {\n    color: getThemeProperty(theme.colors, props.color),\n    fontSize: getThemeProperty(theme.fontSize, props.fontSize),\n    textAlignVertical: 'center',\n    textAlign: 'center',\n  };\n\n  computedStyle.image = {\n    height: props.size,\n    width: props.size,\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  // merging style props to computed style\n  if (props.style) {\n    computedStyle.container = {\n      ...computedStyle.container,\n      // @ts-ignore\n      ...props.style,\n    };\n  }\n\n  return StyleSheet.create(computedStyle);\n};\n"]},"metadata":{},"sourceType":"script"}
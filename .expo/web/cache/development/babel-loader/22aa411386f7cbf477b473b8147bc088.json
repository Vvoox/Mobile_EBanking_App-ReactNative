{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/portal/manager.component.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Manager = React.forwardRef(function (_, ref) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      portals = _React$useState2[0],\n      setPortals = _React$useState2[1];\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      mount: function mount(key, children) {\n        setPortals(function (prev) {\n          return [].concat((0, _toConsumableArray2.default)(prev), [{\n            key: key,\n            children: children\n          }]);\n        });\n      },\n      update: function update(key, children) {\n        setPortals(function (prev) {\n          return prev.map(function (item) {\n            if (item.key === key) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                children: children\n              });\n            }\n\n            return item;\n          });\n        });\n      },\n      unmount: function unmount(key) {\n        setPortals(function (prev) {\n          return prev.filter(function (item) {\n            return item.key !== key;\n          });\n        });\n      }\n    };\n  });\n  return portals.map(function (_ref, index) {\n    var key = _ref.key,\n        children = _ref.children;\n    return React.createElement(_reactNative.View, {\n      key: \"react-native-magnus-portal-\".concat(key, \"-\").concat(index),\n      collapsable: false,\n      pointerEvents: \"box-none\",\n      style: _reactNative.StyleSheet.absoluteFill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }, children);\n  });\n});\nexports.Manager = Manager;","map":{"version":3,"sources":["manager.component.tsx"],"names":["Manager","React","portals","setPortals","mount","key","children","update","prev","item","unmount","StyleSheet"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASO;;AAAA,IAAMA,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAiB,UAAA,CAAA,EAAA,GAAA,EAAiB;AAAA,MAAA,eAAA,GACzBA,KAAK,CAALA,QAAAA,CADyB,EACzBA,CADyB;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAChDC,OADgD,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACvCC,UADuC,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAKvDF,EAAAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,EAEE,YAAA;AAAA,WAAwB;AACtBG,MAAAA,KADsB,EAAA,SAAA,KAAA,CAAA,GAAA,EAAA,QAAA,EAC8B;AAClDD,QAAAA,UAAU,CAAC,UAAA,IAAA,EAAA;AAAA,iBAAA,GAAA,MAAA,CAAA,CAAA,GAAA,mBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,EAAA,CAAoB;AAAEE,YAAAA,GAAG,EAAL,GAAA;AAAOC,YAAAA,QAAQ,EAAnC;AAAoB,WAApB,CAAA,CAAA;AAAXH,SAAU,CAAVA;AAFoB,OAAA;AAKtBI,MAAAA,MALsB,EAAA,SAAA,MAAA,CAAA,GAAA,EAAA,QAAA,EAK+B;AACnDJ,QAAAA,UAAU,CAAC,UAAA,IAAA,EAAA;AAAA,iBACTK,IAAI,CAAJA,GAAAA,CAAS,UAAA,IAAA,EAAU;AACjB,gBAAIC,IAAI,CAAJA,GAAAA,KAAJ,GAAA,EAAsB;AACpB,qBAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA;AAAkBH,gBAAAA,QAAQ,EAA1B;AAAA,eAAA,CAAA;AAGF;;AAAA,mBAAA,IAAA;AANO,WACTE,CADS;AAAXL,SAAU,CAAVA;AANoB,OAAA;AAiBtBO,MAAAA,OAjBsB,EAAA,SAAA,OAAA,CAAA,GAAA,EAiBK;AACzBP,QAAAA,UAAU,CAAC,UAAA,IAAA,EAAA;AAAA,iBAAUK,IAAI,CAAJA,MAAAA,CAAY,UAAA,IAAA,EAAA;AAAA,mBAAUC,IAAI,CAAJA,GAAAA,KAAV,GAAA;AAAtB,WAAUD,CAAV;AAAXL,SAAU,CAAVA;AAlBJ;AAAwB,KAAxB;AAFFF,GAAAA;AAyBA,SAAOC,OAAO,CAAPA,GAAAA,CAAY,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,QAAGG,GAAH,GAAA,IAAA,CAAA,GAAA;AAAA,QAAQC,QAAR,GAAA,IAAA,CAAA,QAAA;AAAA,WACjB,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AACE,MAAA,GAAG,EAAA,8BAAA,MAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CADL,KACK,CADL;AAEE,MAAA,WAAW,EAFb,KAAA;AAGE,MAAA,aAAa,EAHf,UAAA;AAIE,MAAA,KAAK,EAAEK,YAAAA,CAAAA,UAAAA,CAJT,YAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EADiB,QACjB,CADiB;AAAnB,GAAOT,CAAP;AA9BK,CAAgBD,CAAhB","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nexport interface IManagerHandles {\n  mount(key: string, children: React.ReactNode): void;\n  update(key?: string, children?: React.ReactNode): void;\n  unmount(key?: string): void;\n}\n\nexport const Manager = React.forwardRef((_, ref): any => {\n  const [portals, setPortals] = React.useState<\n    { key: string; children: React.ReactNode }[]\n  >([]);\n\n  React.useImperativeHandle(\n    ref,\n    (): IManagerHandles => ({\n      mount(key: string, children: React.ReactNode): void {\n        setPortals((prev) => [...prev, { key, children }]);\n      },\n\n      update(key: string, children: React.ReactNode): void {\n        setPortals((prev) =>\n          prev.map((item) => {\n            if (item.key === key) {\n              return { ...item, children };\n            }\n\n            return item;\n          })\n        );\n      },\n\n      unmount(key: string): void {\n        setPortals((prev) => prev.filter((item) => item.key !== key));\n      },\n    })\n  );\n\n  return portals.map(({ key, children }, index: number) => (\n    <View\n      key={`react-native-magnus-portal-${key}-${index}`}\n      collapsable={false}\n      pointerEvents=\"box-none\"\n      style={StyleSheet.absoluteFill}\n    >\n      {children}\n    </View>\n  ));\n});\n"]},"metadata":{},"sourceType":"script"}
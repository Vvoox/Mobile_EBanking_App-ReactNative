{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/vvoox/REACT_NATIVE/ensapay-client-mobile/navigation/index.tsx\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport NotFoundScreen from \"../views/NotFoundScreen\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport { LoginView } from \"../views/LoginScreen\";\nimport { authState } from \"../services/auth.service\";\nimport { useEffect, useState } from \"react\";\nimport { useKeycloak } from \"expo-keycloak\";\nexport var store = createStore(rootReducer, applyMiddleware(thunk));\nexport default function Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n  return React.createElement(NavigationContainer, {\n    linking: LinkingConfiguration,\n    theme: colorScheme === 'dark' ? DarkTheme : DefaultTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(RootNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  })));\n}\nvar Stack = createStackNavigator();\n\nfunction RootNavigator() {\n  var _useKeycloak = useKeycloak(),\n      ready = _useKeycloak.ready,\n      login = _useKeycloak.login,\n      isLoggedIn = _useKeycloak.isLoggedIn,\n      token = _useKeycloak.token,\n      logout = _useKeycloak.logout;\n\n  var _useState = useState(isLoggedIn),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  useEffect(function () {\n    setAuthenticated(isLoggedIn);\n    authState.token = token;\n  }, [isLoggedIn, token, ready]);\n\n  var handleLogout = function handleLogout() {\n    logout();\n  };\n\n  return !authenticated ? React.createElement(LoginView, {\n    login: login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 27\n    }\n  }) : React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Root\",\n    component: BottomTabNavigator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"NotFound\",\n    component: NotFoundScreen,\n    options: {\n      title: 'Oops!'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/vvoox/REACT_NATIVE/ensapay-client-mobile/navigation/index.tsx"],"names":["NavigationContainer","DefaultTheme","DarkTheme","createStackNavigator","React","NotFoundScreen","BottomTabNavigator","LinkingConfiguration","Provider","applyMiddleware","createStore","rootReducer","thunk","LoginView","authState","useEffect","useState","useKeycloak","store","Navigation","colorScheme","Stack","RootNavigator","ready","login","isLoggedIn","token","logout","authenticated","setAuthenticated","handleLogout","headerShown","title"],"mappings":";;AAAA,SAASA,mBAAT,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,0BAA7D;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,cAAP;AAEA,OAAOC,kBAAP;AACA,OAAOC,oBAAP;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,OAAOC,WAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,SAAR;AACA,SAAQC,SAAR;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAIA,OAAO,IAAMC,KAAK,GAAGR,WAAW,CAACC,WAAD,EAAcF,eAAe,CAACG,KAAD,CAA7B,CAAzB;AAEP,eAAe,SAASO,UAAT,OAAuE;AAAA,MAAjDC,WAAiD,QAAjDA,WAAiD;AACpF,SACE,oBAAC,mBAAD;AACE,IAAA,OAAO,EAAEb,oBADX;AAEE,IAAA,KAAK,EAAEa,WAAW,KAAK,MAAhB,GAAyBlB,SAAzB,GAAqCD,YAF9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEiB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAHJ,CADF;AASD;AAID,IAAMG,KAAK,GAAGlB,oBAAoB,EAAlC;;AAEA,SAASmB,aAAT,GAAyB;AAAA,qBAOjBL,WAAW,EAPM;AAAA,MAEjBM,KAFiB,gBAEjBA,KAFiB;AAAA,MAGjBC,KAHiB,gBAGjBA,KAHiB;AAAA,MAIjBC,UAJiB,gBAIjBA,UAJiB;AAAA,MAKjBC,KALiB,gBAKjBA,KALiB;AAAA,MAMjBC,MANiB,gBAMjBA,MANiB;;AAAA,kBAQqBX,QAAQ,CAACS,UAAD,CAR7B;AAAA;AAAA,MAQdG,aARc;AAAA,MAQCC,gBARD;;AAWrBd,EAAAA,SAAS,CAAC,YAAM;AACZc,IAAAA,gBAAgB,CAACJ,UAAD,CAAhB;AACAX,IAAAA,SAAS,CAACY,KAAV,GAAkBA,KAAlB;AACH,GAHQ,EAGN,CAACD,UAAD,EAAaC,KAAb,EAAoBH,KAApB,CAHM,CAAT;;AAKA,MAAMO,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBH,IAAAA,MAAM;AACT,GAFD;;AAGF,SAAO,CAACC,aAAD,GAAiB,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEJ,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,GACL,oBAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,aAAa,EAAE;AAAEO,MAAAA,WAAW,EAAE;AAAf,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEzB,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,UAAnB;AAA8B,IAAA,SAAS,EAAED,cAAzC;AAAyD,IAAA,OAAO,EAAE;AAAE2B,MAAAA,KAAK,EAAE;AAAT,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../views/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport {Provider} from \"react-redux\";\n// import {store} from \"../App\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"../redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport {LoginView} from \"../views/LoginScreen\";\nimport {authState, login} from \"../services/auth.service\";\nimport {useEffect, useState} from \"react\";\nimport {useKeycloak} from \"expo-keycloak\";\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n        <Provider store={store}>\n            <RootNavigator />\n        </Provider>\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n    const {\n        ready, // If the discovery is already fetched\n        login, // The login function - opens the browser\n        isLoggedIn, // Helper boolean to use e.g. in your components down the tree\n        token, // Access token, if available\n        logout, // Logs the user out\n    } = useKeycloak();\n    const [authenticated, setAuthenticated] = useState(isLoggedIn);\n\n\n    useEffect(() => {\n        setAuthenticated(isLoggedIn);\n        authState.token = token;\n    }, [isLoggedIn, token, ready]);\n\n    const handleLogout = () => {\n        logout();\n    }\n  return !authenticated ? <LoginView login={login}/> :\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getStyle = function getStyle(theme, props) {\n  var computedStyle = {};\n  computedStyle.div = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    flexDirection: props.flexDir,\n    flexWrap: props.flexWrap,\n    alignItems: props.alignItems,\n    justifyContent: props.justifyContent,\n    position: props.position,\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg)\n  }, (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createSpacingStyles)(props, theme.spacing)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n  computedStyle.image = _objectSpread({}, (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n\n  if (props.flex) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      flex: props.flex\n    });\n  }\n\n  if (props.shadow) {\n    computedStyle.div = _objectSpread(_objectSpread(_objectSpread({}, computedStyle.div), theme.shadow && theme.shadow[props.shadow]), {}, {\n      shadowColor: (0, _theme.getThemeProperty)(theme.colors, props.shadowColor)\n    });\n  }\n\n  if (props.h) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      height: props.h\n    });\n  }\n\n  if (props.w) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      width: props.w\n    });\n  }\n\n  if (props.top) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      top: props.top\n    });\n  }\n\n  if (props.right) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      right: props.right\n    });\n  }\n\n  if (props.bottom) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      bottom: props.bottom\n    });\n  }\n\n  if (props.left) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      left: props.left\n    });\n  }\n\n  if (props.minH) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      minHeight: props.minH\n    });\n  }\n\n  if (props.minW) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), {}, {\n      minWidth: props.minW\n    });\n  }\n\n  if (props.style) {\n    computedStyle.div = _objectSpread(_objectSpread({}, computedStyle.div), props.style);\n  }\n\n  return _reactNative.StyleSheet.create(computedStyle);\n};\n\nexports.getStyle = getStyle;","map":{"version":3,"sources":["scrolldiv.style.tsx"],"names":["getStyle","computedStyle","flexDirection","props","flexWrap","alignItems","justifyContent","position","backgroundColor","theme","flex","shadowColor","height","width","top","right","bottom","left","minHeight","minWidth","StyleSheet"],"mappings":";;;;;;;sDAAA,uC;;;;AAGA,IAAA,MAAA,GAAA,OAAA,6BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO;;AAAA,IAAMA,QAAQ,GAARA,SAAAA,QAAAA,CAAW,KAAXA,EAAW,KAAXA,EAAwD;AACnE,MAAMC,aAAkB,GAAxB,EAAA;AAEAA,EAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA;AACEC,IAAAA,aAAa,EAAEC,KAAK,CADtBF,OAAAA;AAEEG,IAAAA,QAAQ,EAAED,KAAK,CAFjBF,QAAAA;AAGEI,IAAAA,UAAU,EAAEF,KAAK,CAHnBF,UAAAA;AAIEK,IAAAA,cAAc,EAAEH,KAAK,CAJvBF,cAAAA;AAKEM,IAAAA,QAAQ,EAAEJ,KAAK,CALjBF,QAAAA;AAMEO,IAAAA,eAAe,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBC,KAAK,CAAtB,MAAA,EAA+BN,KAAK,CANvDF,EAMmB;AANnBA,GAAAA,EAOK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAPLA,KAOK,CAPLA,CAAAA,EAQK,CAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,KAAA,EAA2BQ,KAAK,CARrCR,OAQK,CARLA,CAAAA,EASK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAAA,KAAA,EAA+BQ,KAAK,CATzCR,MASK,CATLA,CAAAA,EAUK,CAAA,GAAA,MAAA,CAAA,wBAAA,EAAA,KAAA,EAAgCQ,KAAK,CAV1CR,YAUK,CAVLA,CAAAA;AAaAA,EAAAA,aAAa,CAAbA,KAAAA,GAAAA,aAAAA,CAAAA,EAAAA,EACK,CAAA,GAAA,MAAA,CAAA,wBAAA,EAAA,KAAA,EAAgCQ,KAAK,CAD1CR,YACK,CADLA,CAAAA;;AAIA,MAAIE,KAAK,CAAT,IAAA,EAAgB;AACdF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEES,MAAAA,IAAI,EAAEP,KAAK,CAFbF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,MAAA,EAAkB;AAChBF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAEMQ,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAALA,MAAAA,CAAaN,KAAK,CAFxCF,MAEsBQ,CAFtBR,CAAAA,EAAAA,EAAAA,EAAAA;AAGEU,MAAAA,WAAW,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBF,KAAK,CAAtB,MAAA,EAA+BN,KAAK,CAHnDF,WAGe;AAHfA,KAAAA,CAAAA;AAOF;;AAAA,MAAIE,KAAK,CAAT,CAAA,EAAa;AACXF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEW,MAAAA,MAAM,EAAET,KAAK,CAFfF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,CAAA,EAAa;AACXF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEY,MAAAA,KAAK,EAAEV,KAAK,CAFdF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,GAAA,EAAe;AACbF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEa,MAAAA,GAAG,EAAEX,KAAK,CAFZF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,KAAA,EAAiB;AACfF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEc,MAAAA,KAAK,EAAEZ,KAAK,CAFdF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,MAAA,EAAkB;AAChBF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEe,MAAAA,MAAM,EAAEb,KAAK,CAFfF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,IAAA,EAAgB;AACdF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEgB,MAAAA,IAAI,EAAEd,KAAK,CAFbF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,IAAA,EAAgB;AACdF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEiB,MAAAA,SAAS,EAAEf,KAAK,CAFlBF;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,MAAIE,KAAK,CAAT,IAAA,EAAgB;AACdF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEkB,MAAAA,QAAQ,EAAEhB,KAAK,CAFjBF;AAAAA,KAAAA,CAAAA;AAOF;;AAAA,MAAIE,KAAK,CAAT,KAAA,EAAiB;AACfF,IAAAA,aAAa,CAAbA,GAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GAAAA,CAAAA,EAGKE,KAAK,CAHVF,KAAAA,CAAAA;AAOF;;AAAA,SAAOmB,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAP,aAAOA,CAAP;AApGK,CAAA","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { ThemeType } from '../../theme';\n\nimport {\n  getThemeProperty,\n  createSpacingStyles,\n  createBorderWidthStyles,\n  createBorderColorStyles,\n  createBorderRadiusStyles,\n} from '../../theme/theme.service';\nimport { ScrollDivProps } from './scrolldiv.type';\n\n/**\n * computed style\n *\n * @param theme\n * @param props\n */\nexport const getStyle = (theme: ThemeType, props: ScrollDivProps) => {\n  const computedStyle: any = {};\n\n  computedStyle.div = {\n    flexDirection: props.flexDir,\n    flexWrap: props.flexWrap,\n    alignItems: props.alignItems,\n    justifyContent: props.justifyContent,\n    position: props.position,\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    ...createBorderWidthStyles(props),\n    ...createSpacingStyles(props, theme.spacing),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  computedStyle.image = {\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  if (props.flex) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      flex: props.flex,\n    };\n  }\n\n  if (props.shadow) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      ...(theme.shadow && theme.shadow[props.shadow]),\n      shadowColor: getThemeProperty(theme.colors, props.shadowColor),\n    };\n  }\n\n  if (props.h) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      height: props.h,\n    };\n  }\n\n  if (props.w) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      width: props.w,\n    };\n  }\n\n  if (props.top) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      top: props.top,\n    };\n  }\n\n  if (props.right) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      right: props.right,\n    };\n  }\n\n  if (props.bottom) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      bottom: props.bottom,\n    };\n  }\n\n  if (props.left) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      left: props.left,\n    };\n  }\n\n  if (props.minH) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      minHeight: props.minH,\n    };\n  }\n\n  if (props.minW) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      minWidth: props.minW,\n    };\n  }\n\n  // merging style props to computed style\n  if (props.style) {\n    computedStyle.div = {\n      ...computedStyle.div,\n      // @ts-ignore\n      ...props.style,\n    };\n  }\n\n  return StyleSheet.create(computedStyle);\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getStyle = function getStyle(theme, props) {\n  var _props$fontFamily;\n\n  var computedStyle = {};\n  computedStyle.text = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    height: props.h,\n    width: props.w,\n    minHeight: props.minH,\n    minWidth: props.minW,\n    maxHeight: props.maxH,\n    maxWidth: props.maxW,\n    flex: props.flex,\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg),\n    overflow: props.overflow,\n    opacity: props.opacity,\n    textDecorationLine: props.textDecorLine,\n    textDecorationStyle: props.textDecorStyle,\n    letterSpacing: props.letterSpacing,\n    fontStyle: props.fontStyle,\n    textAlignVertical: props.textAlignVertical,\n    lineHeight: props.lineHeight,\n    color: (0, _theme.getThemeProperty)(theme.colors, props.color),\n    fontSize: (0, _theme.getThemeProperty)(theme.fontSize, props.fontSize),\n    textAlign: props.textAlign,\n    textTransform: props.textTransform,\n    textDecorationColor: (0, _theme.getThemeProperty)(theme.colors, props.textDecorColor),\n    textShadowColor: (0, _theme.getThemeProperty)(theme.colors, props.textShadowColor),\n    textShadowOffset: {\n      width: (0, _theme.getThemeProperty)(theme.shadow, props.textShadowOffset),\n      height: (0, _theme.getThemeProperty)(theme.shadow, props.textShadowOffset)\n    },\n    textShadowRadius: (0, _theme.getThemeProperty)(theme.borderRadius, props.textShadowRadius),\n    fontWeight: (0, _theme.getFontWeight)(theme.fontFamily, props.fontFamily, props.fontWeight),\n    fontFamily: (_props$fontFamily = props.fontFamily) !== null && _props$fontFamily !== void 0 ? _props$fontFamily : (0, _theme.getThemeFontFamily)(theme.fontFamily, props.fontWeight)\n  }, (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createSpacingStyles)(props, theme.spacing)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n\n  if (props.style) {\n    computedStyle.text = _objectSpread(_objectSpread({}, computedStyle.text), props.style);\n  }\n\n  return _reactNative.StyleSheet.create(computedStyle);\n};\n\nexports.getStyle = getStyle;","map":{"version":3,"sources":["text.style.tsx"],"names":["getStyle","computedStyle","height","props","width","minHeight","minWidth","maxHeight","maxWidth","flex","backgroundColor","theme","overflow","opacity","textDecorationLine","textDecorationStyle","letterSpacing","fontStyle","textAlignVertical","lineHeight","color","fontSize","textAlign","textTransform","textDecorationColor","textShadowColor","textShadowOffset","textShadowRadius","fontWeight","fontFamily","StyleSheet"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\nimport { ThemeType } from '../../theme';\n\nimport {\n  getThemeProperty,\n  createSpacingStyles,\n  createBorderWidthStyles,\n  createBorderColorStyles,\n  createBorderRadiusStyles,\n  getThemeFontFamily,\n  getFontWeight,\n} from '../../theme/theme.service';\nimport { TextProps } from './text.type';\n\n/**\n * computed style\n *\n * @param theme\n * @param props\n */\nexport const getStyle = (theme: ThemeType, props: TextProps) => {\n  const computedStyle: any = {};\n\n  computedStyle.text = {\n    height: props.h,\n    width: props.w,\n    minHeight: props.minH,\n    minWidth: props.minW,\n    maxHeight: props.maxH,\n    maxWidth: props.maxW,\n    flex: props.flex,\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    overflow: props.overflow,\n    opacity: props.opacity,\n\n    textDecorationLine: props.textDecorLine,\n    textDecorationStyle: props.textDecorStyle,\n    letterSpacing: props.letterSpacing,\n    fontStyle: props.fontStyle,\n    textAlignVertical: props.textAlignVertical,\n    lineHeight: props.lineHeight,\n    color: getThemeProperty(theme.colors, props.color),\n    fontSize: getThemeProperty(theme.fontSize, props.fontSize),\n    textAlign: props.textAlign,\n    textTransform: props.textTransform,\n    textDecorationColor: getThemeProperty(theme.colors, props.textDecorColor),\n    textShadowColor: getThemeProperty(theme.colors, props.textShadowColor),\n    textShadowOffset: {\n      width: getThemeProperty(theme.shadow, props.textShadowOffset),\n      height: getThemeProperty(theme.shadow, props.textShadowOffset),\n    },\n    textShadowRadius: getThemeProperty(\n      theme.borderRadius,\n      props.textShadowRadius\n    ),\n\n    fontWeight: getFontWeight(\n      theme.fontFamily,\n      props.fontFamily,\n      props.fontWeight\n    ),\n\n    fontFamily:\n      props.fontFamily ??\n      getThemeFontFamily(theme.fontFamily, props.fontWeight),\n\n    ...createBorderWidthStyles(props),\n    ...createSpacingStyles(props, theme.spacing),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  // merging style props to computed style\n  if (props.style) {\n    computedStyle.text = {\n      ...computedStyle.text,\n      // @ts-ignore\n      ...props.style,\n    };\n  }\n\n  return StyleSheet.create(computedStyle);\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIcon = exports.getIconColor = exports.getIconName = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _icon = require(\"../icon/icon.component\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/checkbox/checkbox.service.tsx\";\n\nvar getIconName = function getIconName() {\n  var checked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var disabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  switch (true) {\n    case disabled:\n      return 'indeterminate-check-box';\n\n    case checked:\n      return 'check-box';\n\n    default:\n      return 'check-box-outline-blank';\n  }\n};\n\nexports.getIconName = getIconName;\n\nvar getIconColor = function getIconColor(checked, disabled, activeColor, inactiveColor, theme) {\n  switch (true) {\n    case disabled:\n      return (0, _theme.getThemeProperty)(theme.colors, inactiveColor);\n\n    case checked:\n      return (0, _theme.getThemeProperty)(theme.colors, activeColor);\n\n    default:\n      return (0, _theme.getThemeProperty)(theme.colors, inactiveColor);\n  }\n};\n\nexports.getIconColor = getIconColor;\n\nvar getIcon = function getIcon(theme, props, checked) {\n  var fontSize = props.fontSize,\n      loaderColor = props.loaderColor,\n      activeIcon = props.activeIcon,\n      activeColor = props.activeColor,\n      inactiveColor = props.inactiveColor,\n      disabled = props.disabled,\n      inactiveIcon = props.inactiveIcon;\n  var iconName = getIconName(checked, disabled !== null && disabled !== void 0 ? disabled : false);\n  var iconColor = getIconColor(checked, disabled, activeColor, inactiveColor, theme);\n\n  if (props.loading) {\n    return React.createElement(_reactNative.ActivityIndicator, {\n      size: (0, _theme.getThemeProperty)(theme.fontSize, fontSize),\n      color: (0, _theme.getThemeProperty)(theme.colors, loaderColor),\n      style: {\n        zIndex: 2,\n        position: 'relative'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (checked) {\n    if (props.activeIcon && typeof activeIcon === 'string') {\n      return React.createElement(_icon.Icon, {\n        name: activeIcon,\n        color: iconColor,\n        style: {\n          zIndex: 2,\n          position: 'relative'\n        },\n        fontFamily: \"AntDesign\",\n        fontSize: fontSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (props.activeIcon) {\n      return activeIcon;\n    }\n  } else {\n    if (inactiveIcon && typeof inactiveIcon === 'string') {\n      return React.createElement(_icon.Icon, {\n        name: inactiveIcon,\n        color: iconColor,\n        style: {\n          zIndex: 2,\n          position: 'relative'\n        },\n        fontFamily: \"AntDesign\",\n        fontSize: fontSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (inactiveIcon) {\n      return inactiveIcon;\n    }\n  }\n\n  return React.createElement(_icon.Icon, {\n    name: iconName,\n    color: iconColor,\n    style: {\n      zIndex: 2,\n      position: 'relative'\n    },\n    fontFamily: \"MaterialIcons\",\n    fontSize: fontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  });\n};\n\nexports.getIcon = getIcon;","map":{"version":3,"sources":["checkbox.service.tsx"],"names":["getIconName","checked","disabled","getIconColor","theme","getIcon","fontSize","loaderColor","activeIcon","activeColor","inactiveColor","inactiveIcon","props","iconName","iconColor","zIndex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ActivityIndicator } from 'react-native';\n\nimport { ThemeType } from '../..//theme';\nimport { Icon } from '../icon/icon.component';\nimport { CheckboxProps } from './checkbox.type';\nimport { getThemeProperty } from '../../theme/theme.service';\n\n/**\n * get icon name based on state\n */\nexport const getIconName = (\n  checked: boolean = false,\n  disabled: boolean = false\n) => {\n  switch (true) {\n    case disabled:\n      return 'indeterminate-check-box';\n    case checked:\n      return 'check-box';\n    default:\n      return 'check-box-outline-blank';\n  }\n};\n\n/**\n * get icon name\n *\n * @param checked\n * @param disabled\n */\nexport const getIconColor = (\n  checked: any,\n  disabled: any,\n  activeColor: any,\n  inactiveColor: any,\n  theme: ThemeType\n) => {\n  switch (true) {\n    case disabled:\n      return getThemeProperty(theme.colors, inactiveColor);\n    case checked:\n      return getThemeProperty(theme.colors, activeColor);\n    default:\n      return getThemeProperty(theme.colors, inactiveColor);\n  }\n};\n\n/*\n * get icon\n * shows activity indication if loading state is true\n */\nexport const getIcon = (\n  theme: ThemeType,\n  props: CheckboxProps,\n  checked: boolean\n) => {\n  const {\n    fontSize,\n    loaderColor,\n    activeIcon,\n    activeColor,\n    inactiveColor,\n    disabled,\n    inactiveIcon,\n  } = props;\n\n  const iconName = getIconName(checked, disabled ?? false);\n  const iconColor = getIconColor(\n    checked,\n    disabled,\n    activeColor,\n    inactiveColor,\n    theme\n  );\n\n  if (props.loading) {\n    return (\n      <ActivityIndicator\n        size={getThemeProperty(theme.fontSize, fontSize)}\n        color={getThemeProperty(theme.colors, loaderColor)}\n        style={{ zIndex: 2, position: 'relative' }}\n      />\n    );\n  }\n\n  if (checked) {\n    if (props.activeIcon && typeof activeIcon === 'string') {\n      return (\n        <Icon\n          name={activeIcon}\n          color={iconColor}\n          style={{ zIndex: 2, position: 'relative' }}\n          fontFamily=\"AntDesign\"\n          fontSize={fontSize}\n        />\n      );\n    }\n\n    if (props.activeIcon) {\n      return activeIcon;\n    }\n  } else {\n    if (inactiveIcon && typeof inactiveIcon === 'string') {\n      return (\n        <Icon\n          name={inactiveIcon}\n          color={iconColor}\n          style={{ zIndex: 2, position: 'relative' }}\n          fontFamily=\"AntDesign\"\n          fontSize={fontSize}\n        />\n      );\n    }\n\n    if (inactiveIcon) {\n      return inactiveIcon;\n    }\n  }\n\n  return (\n    <Icon\n      name={iconName}\n      color={iconColor}\n      style={{ zIndex: 2, position: 'relative' }}\n      fontFamily=\"MaterialIcons\"\n      fontSize={fontSize}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"script"}
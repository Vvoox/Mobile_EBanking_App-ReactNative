{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Consumer = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar Consumer = function Consumer(_ref) {\n  var children = _ref.children,\n      manager = _ref.manager;\n  var key = React.useRef(undefined);\n\n  var checkManager = function checkManager() {\n    if (!manager) {\n      throw new Error('No portal manager defined');\n    }\n  };\n\n  var handleInit = function handleInit() {\n    checkManager();\n    key.current = manager === null || manager === void 0 ? void 0 : manager.mount(children);\n  };\n\n  React.useEffect(function () {\n    checkManager();\n    manager === null || manager === void 0 ? void 0 : manager.update(key.current, children);\n  }, [children, manager]);\n  React.useEffect(function () {\n    handleInit();\n    return function () {\n      checkManager();\n      manager === null || manager === void 0 ? void 0 : manager.unmount(key.current);\n    };\n  }, []);\n  return null;\n};\n\nexports.Consumer = Consumer;","map":{"version":3,"sources":["consumer.component.tsx"],"names":["Consumer","children","manager","key","React","checkManager","handleInit"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AASO,IAAMA,QAAQ,GAARA,SAAAA,QAAAA,CAAW,IAAXA,EAA4D;AAA9CC,MAAAA,QAA8C,GAAA,IAAA,CAA9CA,QAAAA;AAAAA,MAAUC,OAAoC,GAAA,IAAA,CAApCA,OAAVD;AACzB,MAAME,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAZ,SAAYA,CAAZ;;AAEA,MAAMC,YAAY,GAAZA,SAAAA,YAAAA,GAA2B;AAC/B,QAAI,CAAJ,OAAA,EAAc;AACZ,YAAM,IAAA,KAAA,CAAN,2BAAM,CAAN;AAEH;AAJD,GAAA;;AAMA,MAAMC,UAAU,GAAVA,SAAAA,UAAAA,GAAyB;AAC7BD,IAAAA,YAAY;AACZF,IAAAA,GAAG,CAAHA,OAAAA,GAAcD,OAAdC,KAAAA,IAAcD,IAAAA,OAAdC,KAAAA,KAAAA,CAAcD,GAAdC,KAAAA,CAAcD,GAAAA,OAAO,CAAPA,KAAAA,CAAdC,QAAcD,CAAdC;AAFF,GAAA;;AAKAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,YAAY;AACZH,IAAAA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAPA,MAAAA,CAAgBC,GAAG,CAAnBD,OAAAA,EAAAA,QAAAA,CAAAA;AAFFE,GAAAA,EAGG,CAAA,QAAA,EAHHA,OAGG,CAHHA;AAKAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,UAAU;AAEV,WAAO,YAAY;AACjBD,MAAAA,YAAY;AACZH,MAAAA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAPA,OAAAA,CAAiBC,GAAG,CAApBD,OAAAA,CAAAA;AAFF,KAAA;AAHFE,GAAAA,EAAAA,EAAAA;AASA,SAAA,IAAA;AA5BK,CAAA","sourcesContent":["import * as React from 'react';\n\nimport { IProvider } from './host.component';\n\ninterface IConsumerProps {\n  children: React.ReactNode;\n  manager: IProvider | null;\n}\n\nexport const Consumer = ({ children, manager }: IConsumerProps): null => {\n  const key = React.useRef<string | undefined>(undefined);\n\n  const checkManager = (): void => {\n    if (!manager) {\n      throw new Error('No portal manager defined');\n    }\n  };\n\n  const handleInit = (): void => {\n    checkManager();\n    key.current = manager?.mount(children);\n  };\n\n  React.useEffect(() => {\n    checkManager();\n    manager?.update(key.current, children);\n  }, [children, manager]);\n\n  React.useEffect(() => {\n    handleInit();\n\n    return (): void => {\n      checkManager();\n      manager?.unmount(key.current);\n    };\n  }, []);\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"script"}
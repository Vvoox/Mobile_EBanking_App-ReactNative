{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/vvoox/REACT_NATIVE/ensapay-client-mobile/navigation/index.tsx\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport NotFoundScreen from \"../views/NotFoundScreen\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport { LoginView } from \"../views/LoginScreen\";\nimport { authState, keycloak } from \"../services/auth.service\";\nimport { useEffect, useState } from \"react\";\nimport { KeycloakProvider, useKeycloak } from 'expo-keycloak';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var store = createStore(rootReducer, applyMiddleware(thunk));\nimport { useColorScheme } from 'react-native-appearance';\nexport default function Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n  return React.createElement(KeycloakProvider, _extends({}, keycloak, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(RootNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }))));\n}\nvar Stack = createStackNavigator();\n\nfunction RootNavigator() {\n  var colorScheme = useColorScheme();\n  var themeStatusBarStyle = colorScheme === 'light' ? 'dark-content' : 'light-content';\n  var themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n  var themeContainerStyle = colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n\n  var _useKeycloak = useKeycloak(),\n      ready = _useKeycloak.ready,\n      login = _useKeycloak.login,\n      isLoggedIn = _useKeycloak.isLoggedIn,\n      token = _useKeycloak.token,\n      logout = _useKeycloak.logout;\n\n  var _useState = useState(isLoggedIn),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  useEffect(function () {\n    setAuthenticated(isLoggedIn);\n    authState.token = token;\n  }, [isLoggedIn, token, ready]);\n\n  var handleLogout = function handleLogout() {\n    logout();\n  };\n\n  return !authenticated ? React.createElement(LoginView, {\n    login: login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 27\n    }\n  }) : React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Root\",\n    component: BottomTabNavigator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"NotFound\",\n    component: NotFoundScreen,\n    options: {\n      title: 'Oops!'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  lightContainer: {\n    backgroundColor: '#D0D0C0'\n  },\n  darkContainer: {\n    backgroundColor: '#242C40'\n  },\n  lightThemeText: {\n    color: '#242C40'\n  },\n  darkThemeText: {\n    color: '#D0D0C0'\n  }\n});","map":{"version":3,"sources":["/home/vvoox/REACT_NATIVE/ensapay-client-mobile/navigation/index.tsx"],"names":["NavigationContainer","createStackNavigator","React","NotFoundScreen","BottomTabNavigator","Provider","applyMiddleware","createStore","rootReducer","thunk","LoginView","authState","keycloak","useEffect","useState","KeycloakProvider","useKeycloak","store","useColorScheme","Navigation","colorScheme","Stack","RootNavigator","themeStatusBarStyle","themeTextStyle","styles","lightThemeText","darkThemeText","themeContainerStyle","lightContainer","darkContainer","ready","login","isLoggedIn","token","logout","authenticated","setAuthenticated","handleLogout","headerShown","title","StyleSheet","create","container","flex","alignItems","justifyContent","backgroundColor","color"],"mappings":"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","sourcesContent":["import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../views/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport {Provider} from \"react-redux\";\n// import {store} from \"../App\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"../redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport {LoginView} from \"../views/LoginScreen\";\nimport {authState, keycloak, login} from \"../services/auth.service\";\nimport {useEffect, useState} from \"react\";\nimport {KeycloakProvider, useKeycloak} from 'expo-keycloak';\nimport {Image, StyleSheet} from \"react-native\";\n\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\nimport {AppearanceProvider, useColorScheme} from 'react-native-appearance';\n\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  // return (\n  //   <NavigationContainer\n  //     linking={LinkingConfiguration}\n  //     theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n  //       <Provider store={store}>\n  //           <RootNavigator />\n  //       </Provider>\n  //\n  //   </NavigationContainer>\n  // );\n    return (\n        <KeycloakProvider{...keycloak}>\n            <NavigationContainer>\n        <Provider store={store}>\n            {/*<AppearanceProvider>*/}\n            <RootNavigator/>\n            {/*</AppearanceProvider>*/}\n        </Provider>\n            </NavigationContainer>\n\n        </KeycloakProvider>\n    );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n    const colorScheme = useColorScheme();\n\n    const themeStatusBarStyle = colorScheme === 'light' ? 'dark-content' : 'light-content';\n    const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;\n    const themeContainerStyle =\n        colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;\n    const {\n        ready, // If the discovery is already fetched\n        login, // The login function - opens the browser\n        isLoggedIn, // Helper boolean to use e.g. in your components down the tree\n        token, // Access token, if available\n        logout, // Logs the user out\n    } = useKeycloak();\n    const [authenticated, setAuthenticated] = useState(isLoggedIn);\n\n\n    useEffect(() => {\n        setAuthenticated(isLoggedIn);\n        authState.token = token;\n    }, [isLoggedIn, token, ready]);\n\n    const handleLogout = () => {\n        logout();\n    }\n  return !authenticated ? <LoginView login={login}/> :\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    lightContainer: {\n        backgroundColor: '#D0D0C0',\n    },\n    darkContainer: {\n        backgroundColor: '#242C40',\n    },\n    lightThemeText: {\n        color: '#242C40',\n    },\n    darkThemeText: {\n        color: '#D0D0C0',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}
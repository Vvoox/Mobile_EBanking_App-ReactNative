{"ast":null,"code":"import axios from \"axios\";\nimport { config } from \"../constants/api\";\n\nvar keycloakFormData = function keycloakFormData() {\n  var formData = new URLSearchParams();\n  formData.append('grant_type', 'password');\n  formData.append('client_id', 'ressource-server');\n  return formData;\n};\n\nexport var authState = {\n  token: localStorage.getItem(\"token\")\n};\nexport var keycloak = {\n  url: \"\" + config.AUTH_SERVER,\n  realm: \"ensapay\",\n  clientId: \"resource-server\",\n  scopes: ['email', 'profile'],\n  redirectUri: config.REDIRECT_URI\n};\nexport var login = function login(username, password) {\n  var body = keycloakFormData();\n  body.append(\"username\", username);\n  body.append(\"password\", password);\n  return axios.post(config.AUTH_SERVER, body).then(function (response) {\n    return localStorage.setItem(\"access_token\", response.data.access_token);\n  }).catch(function (error) {\n    return console.log(error.data);\n  });\n};\nexport var loadUserInfo = function loadUserInfo(token) {\n  var body = keycloakFormData();\n  body.append(\"username\", \"admin\");\n  body.append(\"password\", \"secret\");\n  return axios.post(config.AUTH_SERVER, body).then(function (response) {\n    return localStorage.setItem(\"access_token\", response.data.access_token);\n  }).catch(function (error) {\n    return console.log(error.data);\n  });\n};","map":{"version":3,"sources":["/home/vvoox/REACT_NATIVE/ensapay-client-mobile/services/auth.service.ts"],"names":["axios","config","keycloakFormData","formData","URLSearchParams","append","authState","token","localStorage","getItem","keycloak","url","AUTH_SERVER","realm","clientId","scopes","redirectUri","REDIRECT_URI","login","username","password","body","post","then","response","setItem","data","access_token","catch","error","console","log","loadUserInfo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR;;AASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,MAAMC,QAAQ,GAAG,IAAIC,eAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8B,UAA9B;AACAF,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6B,kBAA7B;AACA,SAAOF,QAAP;AACH,CALD;;AAOA,OAAO,IAAMG,SAAS,GAAG;AAErBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFc,CAAlB;AAKP,OAAO,IAAMC,QAAgC,GAAG;AAC5CC,EAAAA,GAAG,OAAKV,MAAM,CAACW,WAD6B;AAE5CC,EAAAA,KAAK,EAAE,SAFqC;AAG5CC,EAAAA,QAAQ,EAAE,iBAHkC;AAI5CC,EAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,SAAV,CAJoC;AAK5CC,EAAAA,WAAW,EAAEf,MAAM,CAACgB;AALwB,CAAzC;AAUP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAmBC,QAAnB,EAAwC;AACzD,MAAMC,IAAI,GAAGnB,gBAAgB,EAA7B;AACAmB,EAAAA,IAAI,CAAChB,MAAL,CAAY,UAAZ,EAAwBc,QAAxB;AACAE,EAAAA,IAAI,CAAChB,MAAL,CAAY,UAAZ,EAAwBe,QAAxB;AACA,SAAOpB,KAAK,CAACsB,IAAN,CAAWrB,MAAM,CAACW,WAAlB,EAA+BS,IAA/B,EACFE,IADE,CACG,UAAAC,QAAQ;AAAA,WAAIhB,YAAY,CAACiB,OAAb,CAAqB,cAArB,EAAqCD,QAAQ,CAACE,IAAT,CAAcC,YAAnD,CAAJ;AAAA,GADX,EAEFC,KAFE,CAEI,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,IAAlB,CAAJ;AAAA,GAFT,CAAP;AAGH,CAPM;AASP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACzB,KAAD,EAAmB;AAQ3C,MAAMc,IAAI,GAAGnB,gBAAgB,EAA7B;AACAmB,EAAAA,IAAI,CAAChB,MAAL,CAAY,UAAZ,EAAwB,OAAxB;AACAgB,EAAAA,IAAI,CAAChB,MAAL,CAAY,UAAZ,EAAwB,QAAxB;AAMA,SAAOL,KAAK,CAACsB,IAAN,CAAWrB,MAAM,CAACW,WAAlB,EAA+BS,IAA/B,EACFE,IADE,CACG,UAAAC,QAAQ;AAAA,WAAIhB,YAAY,CAACiB,OAAb,CAAqB,cAArB,EAAqCD,QAAQ,CAACE,IAAT,CAAcC,YAAnD,CAAJ;AAAA,GADX,EAEFC,KAFE,CAEI,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,IAAlB,CAAJ;AAAA,GAFT,CAAP;AAGH,CAnBM","sourcesContent":["import axios from \"axios\";\nimport {config} from \"../constants/api\";\nimport Keycloak from 'keycloak-js';\nimport { RNKeycloak } from '@react-keycloak/native';\nimport {\n    IKeycloakConfiguration,\n    KeycloakProvider,\n    useKeycloak,\n} from 'expo-keycloak';\n\nconst keycloakFormData = () => {\n    const formData = new URLSearchParams();\n    formData.append('grant_type', 'password');\n    formData.append('client_id', 'ressource-server');\n    return formData;\n};\n\nexport const authState = {\n    // token: ''\n    token: localStorage.getItem(\"token\")\n};\n\nexport const keycloak: IKeycloakConfiguration = {\n    url: `${config.AUTH_SERVER}`,\n    realm: \"ensapay\",\n    clientId: \"resource-server\",\n    scopes: ['email', 'profile'],\n    redirectUri: config.REDIRECT_URI,\n    // usePKCE: true,\n};\n\n\nexport const login = (username: string, password: string) => {\n    const body = keycloakFormData();\n    body.append(\"username\", username);\n    body.append(\"password\", password);\n    return axios.post(config.AUTH_SERVER, body)\n        .then(response => localStorage.setItem(\"access_token\", response.data.access_token))\n        .catch(error => console.log(error.data));\n};\n\nexport const loadUserInfo = (token: string) => {\n    // const {\n    //     ready, // If the discovery is already fetched\n    //     login, // The login function - opens the browser\n    //     isLoggedIn, // Helper boolean to use e.g. in your components down the tree\n    //     token, // Access token, if available\n    //     logout, // Logs the user out\n    // } = useKeycloak();\n    const body = keycloakFormData();\n    body.append(\"username\", \"admin\");\n    body.append(\"password\", \"secret\");\n    // return axios.get(config.AUTH_SERVER + '/realms/ensapay/protocol/openid-connect/userinfo', {\n    //     // headers: {\n    //     //     Authorization: `Bearer ${token}`\n    //     // }\n    // })\n    return axios.post(config.AUTH_SERVER, body)\n        .then(response => localStorage.setItem(\"access_token\", response.data.access_token))\n        .catch(error => console.log(error.data));\n};\n"]},"metadata":{},"sourceType":"module"}